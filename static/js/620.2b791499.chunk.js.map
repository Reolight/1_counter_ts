{"version":3,"file":"static/js/620.2b791499.chunk.js","mappings":"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","sources":["common/types/LoginTypes.ts","components/containers/LoginContainer/LoginContainer.tsx","components/views/LoginWrapper/WelcomeMessage.tsx","components/views/LoginWrapper/LoginWrapper.tsx","components/views/Login/const/LoginSchema.ts","components/views/Login/LoginFormik.tsx","components/views/Login/Login.tsx","webpack://1_counter_ts/./src/components/views/Login/styles/login.module.css?f920"],"sourcesContent":["import { FormEventHandler } from \"react\";\r\n\r\nexport type LoginProperty = \"email\" | \"password\";\r\n\r\nexport interface LoginState {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport const InitialLoginState: LoginState = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport interface LoginProps extends LoginState {\r\n  onSubmit?: FormEventHandler;\r\n  onInput: (target: LoginProperty, value: string) => void;\r\n  renderContent?: boolean;\r\n}\r\n\r\nexport interface IParameter {\r\n  name: string;\r\n  value: string;\r\n}\r\n","import { FormEvent, useState } from \"react\";\r\nimport { LoginState, LoginProperty } from \"@common/types\";\r\nimport { Login } from \"@views/Login\";\r\n\r\nconst initialValue : LoginState = {\r\n  email: \"\",\r\n  password: \"\",\r\n}\r\n\r\nexport default function LoginContainer(): JSX.Element {\r\n  const [state, setState] = useState<LoginState>( initialValue );\r\n\r\n  /**\r\n   * Функция для обновления свойства состояния.\r\n   * @param target имя свойства, которое обновляется\r\n   * @param value новое значение свойства\r\n   */\r\n  // N.B.: Код внутри setState не является мутацией.\r\n  function onUpdate(target: LoginProperty, value: string) {\r\n    setState(prevState => ({ ...prevState, [target]: value }));\r\n  }\r\n\r\n  /**\r\n   * Получает данные из формы и выводит их в консоль, отключает обработку\r\n   * подтверждения формы по умолчанию, очищает поля ввода.\r\n   * @param e FormEvents подтвердённой формы\r\n   */\r\n  function logCredentials(e: FormEvent) {\r\n    // можно получить данные из state этого компонента\r\n    // но можно получить данные из формы и так (в случае отсутсвия контейнера):\r\n    const data = new FormData(e.target as HTMLFormElement);\r\n    console.log(JSON.stringify(Object.fromEntries(data.entries())));\r\n\r\n    e.preventDefault();\r\n\r\n    setState(initialValue);\r\n  }\r\n\r\n  return (\r\n    <Login\r\n      onInput={onUpdate}\r\n      onSubmit={logCredentials}\r\n      renderContent={true}\r\n      email={state.email}\r\n      password={state.password}\r\n    />\r\n  );\r\n}\r\n","import { Label } from \"@progress/kendo-react-labels\";\r\n\r\ninterface WelcomeProps {\r\n  email?: string;\r\n}\r\n\r\nexport default function WelcomeMessage(props: WelcomeProps) {\r\n  return (\r\n    <Label style={{ margin: 4 }}>\r\n      {`Hello, ${(!!props.email? props.email : 'guest')}!`}\r\n    </Label>\r\n  );\r\n}\r\n","import { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport WelcomeMessage from \"./WelcomeMessage\";\r\n\r\ninterface IProps {\r\n    email? : string;\r\n    children?: JSX.Element;\r\n}\r\n\r\nexport default function LoginWrapper(props : IProps): JSX.Element {\r\n  return (\r\n    <StackLayout orientation=\"vertical\">\r\n      <WelcomeMessage\r\n        email={props.email}\r\n      />\r\n      {props.children}\r\n    </StackLayout>\r\n  );\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nexport const loginSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"ожидается электронная почта\")\r\n      .min(6, \"не менее 6 символов\")\r\n      .required(\"обязательное поле\"),\r\n    password: Yup.string()\r\n      .min(6, \"не менее 6 символов\")\r\n      .required(\"обязательное поле\"),\r\n  });","import { ErrorMessage, Field, Formik, Form } from \"formik\";\r\nimport { InitialLoginState } from \"@common/types\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"@stores/hooks\";\r\nimport { update } from \"@stores/redux\";\r\nimport { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport { loginSchema } from \"./const/LoginSchema\";\r\nimport styles from \"./styles/login.module.css\";\r\nimport LoginWrapper from \"@views/LoginWrapper\";\r\n\r\nconst StyledErrorMessage = (props : { name: string}) => (<ErrorMessage name={props.name}>\r\n  {msg => <div className={styles.error}>{msg}</div>}\r\n</ErrorMessage>)\r\n\r\nexport default function LoginFormik(): JSX.Element {\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const reduxState = useAppSelector((redState) => redState.loginReducer);\r\n\r\n  return (\r\n    <LoginWrapper email={reduxState.email}>\r\n      <Formik\r\n        initialValues={InitialLoginState}\r\n        validationSchema={loginSchema}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          setTimeout(() => {\r\n            dispatch(\r\n              update({ email: values.email, password: values.password })\r\n            );\r\n            navigate(\"success\");\r\n            setSubmitting(false);\r\n          });\r\n        }}\r\n      >\r\n        <Form>\r\n          <StackLayout orientation=\"vertical\">\r\n            <div className={styles[\"default-margin\"]}>\r\n              <label\r\n                className={`${styles[\"margin-right\"]} ${styles.required}`}\r\n                htmlFor=\"email\"\r\n              >\r\n                Email:{\" \"}\r\n              </label>\r\n              <StackLayout orientation=\"vertical\">\r\n                <Field className={styles[\"input-field\"]} name=\"email\" />\r\n                <StyledErrorMessage name=\"email\" />\r\n              </StackLayout>\r\n            </div>\r\n\r\n            <div className={styles[\"default-margin\"]}>\r\n              <label\r\n                className={`${styles[\"margin-right\"]} ${styles.required}`}\r\n                htmlFor=\"password\"\r\n              >\r\n                Password:{\" \"}\r\n              </label>\r\n              <StackLayout orientation=\"vertical\">\r\n                <Field\r\n                  className={styles[\"input-field\"]}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                />\r\n                <StyledErrorMessage name=\"password\" />\r\n              </StackLayout>\r\n            </div>\r\n\r\n            <button className={styles.submit} type=\"submit\">\r\n              Submit\r\n            </button>\r\n          </StackLayout>\r\n        </Form>\r\n      </Formik>\r\n    </LoginWrapper>\r\n  );\r\n}\r\n","import { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport { LoginProps } from \"@common/types\";\r\nimport styles from \"./styles/login.module.css\";\r\n\r\nexport default function Login(props: LoginProps): JSX.Element {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <StackLayout\r\n        orientation=\"vertical\"\r\n        align={{ horizontal: \"center\", vertical: \"middle\" }}\r\n      >\r\n        <label htmlFor=\"email\" className={styles.required}>\r\n          Email{props.renderContent && ` (${props.email})`}\r\n        </label>\r\n        <input\r\n          required\r\n          id=\"email\"\r\n          className={styles[\"default-margin\"]}\r\n          minLength={6}\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={props.email}\r\n          placeholder=\"email\"\r\n          onInput={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            props.onInput(\"email\", e.target.value)\r\n          }\r\n        />\r\n        <label htmlFor=\"password\" className={styles.required}>\r\n          password{props.renderContent && ` (${props.password})`}\r\n        </label>\r\n        <input\r\n          required\r\n          id=\"password\"\r\n          className={styles['default-margin']}\r\n          minLength={6}\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={props.password}\r\n          placeholder=\"password\"\r\n          onInput={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            props.onInput(\"password\", e.target.value)\r\n          }\r\n        />\r\n        <input type=\"submit\" value=\"Login\" />\r\n      </StackLayout>\r\n    </form>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input-field\":\"login_input-field__tKBTk\",\"default-margin\":\"login_default-margin__L4dqo\",\"margin-right\":\"login_margin-right__b4pyf\",\"required\":\"login_required__PrTP4\",\"error\":\"login_error__fWkAx\",\"submit\":\"login_submit__Ffr-0\"};"],"names":["InitialLoginState","email","password","initialValue","LoginContainer","state","setState","useState","_jsx","Login","onInput","target","value","prevState","onSubmit","e","data","FormData","console","log","JSON","stringify","Object","fromEntries","entries","preventDefault","renderContent","WelcomeMessage","props","Label","style","margin","children","concat","LoginWrapper","_jsxs","StackLayout","orientation","loginSchema","Yup","shape","min","required","StyledErrorMessage","ErrorMessage","name","msg","className","styles","error","LoginFormik","navigate","useNavigate","dispatch","useAppDispatch","reduxState","useAppSelector","redState","loginReducer","Formik","initialValues","validationSchema","values","_ref","setSubmitting","setTimeout","update","Form","htmlFor","Field","type","submit","align","horizontal","vertical","id","minLength","placeholder"],"sourceRoot":""}