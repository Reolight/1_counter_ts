{"version":3,"file":"static/js/726.ad7fc1b8.chunk.js","mappings":"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","sources":["common/types/LoginTypes.ts","components/containers/LoginMstContainer/LoginMstContainer.tsx","components/views/LoginWrapper/WelcomeMessage.tsx","components/views/LoginWrapper/LoginWrapper.tsx","components/views/Login/const/LoginSchema.ts","components/views/Login/LoginFormik.tsx","components/views/Login/Login.tsx","webpack://1_counter_ts/./src/components/views/Login/styles/login.module.css?f920"],"sourcesContent":["import { FormEventHandler } from \"react\";\r\n\r\nexport type LoginProperty = \"email\" | \"password\";\r\n\r\nexport interface LoginState {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport const InitialLoginState: LoginState = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport interface LoginProps extends LoginState {\r\n  onSubmit?: FormEventHandler;\r\n  onInput: (target: LoginProperty, value: string) => void;\r\n  renderContent?: boolean;\r\n}\r\n\r\nexport interface IParameter {\r\n  name: string;\r\n  value: string;\r\n}\r\n","import { FormEvent, useState } from \"react\";\r\nimport { LoginProperty, LoginState } from \"@common/types\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useMst } from \"@stores/mobx\";\r\nimport LoginWrapper from \"@views/LoginWrapper\";\r\nimport { Login } from \"@views/Login\";\r\n\r\nconst initialState: LoginState = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport default function LoginMstContainer() {\r\n  const loginSavedState = useMst();\r\n  const navigate = useNavigate();\r\n  const [state, setState] = useState<LoginState>(\r\n    loginSavedState.logged\r\n      ? { email: loginSavedState.email!, password: loginSavedState.password! }\r\n      : initialState\r\n  );\r\n\r\n  function onInput(target: LoginProperty, value: string) {\r\n    setState((prevState) => ({ ...prevState, [target]: value }));\r\n  }\r\n\r\n  function setCredentials(e: FormEvent) {\r\n    loginSavedState.login(state.email, state.password);\r\n    setState(initialState);\r\n    navigate(\"success\");\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <LoginWrapper email={loginSavedState.email}>\r\n      <Login\r\n        email={state.email}\r\n        password={state.password}\r\n        onInput={onInput}\r\n        onSubmit={setCredentials}\r\n        renderContent\r\n      />\r\n    </LoginWrapper>\r\n  );\r\n}\r\n","import { Label } from \"@progress/kendo-react-labels\";\r\n\r\ninterface WelcomeProps {\r\n  email?: string;\r\n}\r\n\r\nexport default function WelcomeMessage(props: WelcomeProps) {\r\n  return (\r\n    <Label style={{ margin: 4 }}>\r\n      {`Hello, ${(!!props.email? props.email : 'guest')}!`}\r\n    </Label>\r\n  );\r\n}\r\n","import { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport WelcomeMessage from \"./WelcomeMessage\";\r\n\r\ninterface IProps {\r\n    email? : string;\r\n    children?: JSX.Element;\r\n}\r\n\r\nexport default function LoginWrapper(props : IProps): JSX.Element {\r\n  return (\r\n    <StackLayout orientation=\"vertical\">\r\n      <WelcomeMessage\r\n        email={props.email}\r\n      />\r\n      {props.children}\r\n    </StackLayout>\r\n  );\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nexport const loginSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"ожидается электронная почта\")\r\n      .min(6, \"не менее 6 символов\")\r\n      .required(\"обязательное поле\"),\r\n    password: Yup.string()\r\n      .min(6, \"не менее 6 символов\")\r\n      .required(\"обязательное поле\"),\r\n  });","import { ErrorMessage, Field, Formik, Form } from \"formik\";\r\nimport { InitialLoginState } from \"@common/types\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"@stores/hooks\";\r\nimport { update } from \"@stores/redux\";\r\nimport { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport { loginSchema } from \"./const/LoginSchema\";\r\nimport styles from \"./styles/login.module.css\";\r\nimport LoginWrapper from \"@views/LoginWrapper\";\r\n\r\nconst StyledErrorMessage = (props : { name: string}) => (<ErrorMessage name={props.name}>\r\n  {msg => <div className={styles.error}>{msg}</div>}\r\n</ErrorMessage>)\r\n\r\nexport default function LoginFormik(): JSX.Element {\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const reduxState = useAppSelector((redState) => redState.loginReducer);\r\n\r\n  return (\r\n    <LoginWrapper email={reduxState.email}>\r\n      <Formik\r\n        initialValues={InitialLoginState}\r\n        validationSchema={loginSchema}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          setTimeout(() => {\r\n            dispatch(\r\n              update({ email: values.email, password: values.password })\r\n            );\r\n            navigate(\"success\");\r\n            setSubmitting(false);\r\n          });\r\n        }}\r\n      >\r\n        <Form>\r\n          <StackLayout orientation=\"vertical\">\r\n            <div className={styles[\"default-margin\"]}>\r\n              <label\r\n                className={`${styles[\"margin-right\"]} ${styles.required}`}\r\n                htmlFor=\"email\"\r\n              >\r\n                Email:{\" \"}\r\n              </label>\r\n              <StackLayout orientation=\"vertical\">\r\n                <Field className={styles[\"input-field\"]} name=\"email\" />\r\n                <StyledErrorMessage name=\"email\" />\r\n              </StackLayout>\r\n            </div>\r\n\r\n            <div className={styles[\"default-margin\"]}>\r\n              <label\r\n                className={`${styles[\"margin-right\"]} ${styles.required}`}\r\n                htmlFor=\"password\"\r\n              >\r\n                Password:{\" \"}\r\n              </label>\r\n              <StackLayout orientation=\"vertical\">\r\n                <Field\r\n                  className={styles[\"input-field\"]}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                />\r\n                <StyledErrorMessage name=\"password\" />\r\n              </StackLayout>\r\n            </div>\r\n\r\n            <button className={styles.submit} type=\"submit\">\r\n              Submit\r\n            </button>\r\n          </StackLayout>\r\n        </Form>\r\n      </Formik>\r\n    </LoginWrapper>\r\n  );\r\n}\r\n","import { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport { LoginProps } from \"@common/types\";\r\nimport styles from \"./styles/login.module.css\";\r\n\r\nexport default function Login(props: LoginProps): JSX.Element {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <StackLayout\r\n        orientation=\"vertical\"\r\n        align={{ horizontal: \"center\", vertical: \"middle\" }}\r\n      >\r\n        <label htmlFor=\"email\" className={styles.required}>\r\n          Email{props.renderContent && ` (${props.email})`}\r\n        </label>\r\n        <input\r\n          required\r\n          id=\"email\"\r\n          className={styles[\"default-margin\"]}\r\n          minLength={6}\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={props.email}\r\n          placeholder=\"email\"\r\n          onInput={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            props.onInput(\"email\", e.target.value)\r\n          }\r\n        />\r\n        <label htmlFor=\"password\" className={styles.required}>\r\n          password{props.renderContent && ` (${props.password})`}\r\n        </label>\r\n        <input\r\n          required\r\n          id=\"password\"\r\n          className={styles['default-margin']}\r\n          minLength={6}\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={props.password}\r\n          placeholder=\"password\"\r\n          onInput={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            props.onInput(\"password\", e.target.value)\r\n          }\r\n        />\r\n        <input type=\"submit\" value=\"Login\" />\r\n      </StackLayout>\r\n    </form>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input-field\":\"login_input-field__tKBTk\",\"default-margin\":\"login_default-margin__L4dqo\",\"margin-right\":\"login_margin-right__b4pyf\",\"required\":\"login_required__PrTP4\",\"error\":\"login_error__fWkAx\",\"submit\":\"login_submit__Ffr-0\"};"],"names":["InitialLoginState","email","password","initialState","LoginMstContainer","loginSavedState","useMst","navigate","useNavigate","state","setState","useState","logged","_jsx","LoginWrapper","children","Login","onInput","target","value","prevState","onSubmit","e","login","preventDefault","renderContent","WelcomeMessage","props","Label","style","margin","concat","_jsxs","StackLayout","orientation","loginSchema","Yup","shape","min","required","StyledErrorMessage","ErrorMessage","name","msg","className","styles","error","LoginFormik","dispatch","useAppDispatch","reduxState","useAppSelector","redState","loginReducer","Formik","initialValues","validationSchema","values","_ref","setSubmitting","setTimeout","update","Form","htmlFor","Field","type","submit","align","horizontal","vertical","id","minLength","placeholder"],"sourceRoot":""}