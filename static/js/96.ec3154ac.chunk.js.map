{"version":3,"file":"static/js/96.ec3154ac.chunk.js","mappings":"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","sources":["common/types/LoginTypes.ts","components/containers/LoginReduxContainer/LoginReduxContainer.tsx","components/views/LoginWrapper/WelcomeMessage.tsx","components/views/LoginWrapper/LoginWrapper.tsx","components/views/Login/const/LoginSchema.ts","components/views/Login/LoginFormik.tsx","components/views/Login/Login.tsx","webpack://1_counter_ts/./src/components/views/Login/styles/login.module.css?f920"],"sourcesContent":["import { FormEventHandler } from \"react\";\r\n\r\nexport type LoginProperty = \"email\" | \"password\";\r\n\r\nexport interface LoginState {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport const InitialLoginState: LoginState = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport interface LoginProps extends LoginState {\r\n  onSubmit?: FormEventHandler;\r\n  onInput: (target: LoginProperty, value: string) => void;\r\n  renderContent?: boolean;\r\n}\r\n\r\nexport interface IParameter {\r\n  name: string;\r\n  value: string;\r\n}\r\n","import { FormEvent, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"@stores/hooks\";\r\nimport { update } from \"@stores/redux\";\r\nimport { Login } from \"@views/Login\";\r\nimport { LoginState, InitialLoginState, LoginProperty } from \"@common/types/LoginTypes\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport LoginWrapper from \"@views/LoginWrapper\";\r\n\r\nexport default function LoginReduxContainer(): JSX.Element {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const [state, setState] = useState<LoginState>(InitialLoginState);\r\n  const reduxState = useAppSelector((redState) => redState.loginReducer);\r\n\r\n  function onInput(target: LoginProperty, value: string) {\r\n    setState((prevState) => ({ ...prevState, [target]: value }));\r\n  }\r\n\r\n  function setCredentials(e: FormEvent) {\r\n    const data = new FormData(e.target as HTMLFormElement);\r\n    console.log(JSON.stringify(Object.fromEntries(data.entries())));\r\n\r\n    dispatch(update({ email: state.email, password: state.password }));\r\n    navigate(\"success\");\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <LoginWrapper email={reduxState.email}>\r\n      <Login\r\n        email={state.email}\r\n        password={state.password}\r\n        renderContent={true}\r\n        onInput={onInput}\r\n        onSubmit={setCredentials}\r\n      />\r\n    </LoginWrapper>\r\n  );\r\n}\r\n","import { Label } from \"@progress/kendo-react-labels\";\r\n\r\ninterface WelcomeProps {\r\n  email?: string;\r\n}\r\n\r\nexport default function WelcomeMessage(props: WelcomeProps) {\r\n  return (\r\n    <Label style={{ margin: 4 }}>\r\n      {`Hello, ${(!!props.email? props.email : 'guest')}!`}\r\n    </Label>\r\n  );\r\n}\r\n","import { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport WelcomeMessage from \"./WelcomeMessage\";\r\n\r\ninterface IProps {\r\n    email? : string;\r\n    children?: JSX.Element;\r\n}\r\n\r\nexport default function LoginWrapper(props : IProps): JSX.Element {\r\n  return (\r\n    <StackLayout orientation=\"vertical\">\r\n      <WelcomeMessage\r\n        email={props.email}\r\n      />\r\n      {props.children}\r\n    </StackLayout>\r\n  );\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nexport const loginSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"ожидается электронная почта\")\r\n      .min(6, \"не менее 6 символов\")\r\n      .required(\"обязательное поле\"),\r\n    password: Yup.string()\r\n      .min(6, \"не менее 6 символов\")\r\n      .required(\"обязательное поле\"),\r\n  });","import { ErrorMessage, Field, Formik, Form } from \"formik\";\r\nimport { InitialLoginState } from \"@common/types\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"@stores/hooks\";\r\nimport { update } from \"@stores/redux\";\r\nimport { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport { loginSchema } from \"./const/LoginSchema\";\r\nimport styles from \"./styles/login.module.css\";\r\nimport LoginWrapper from \"@views/LoginWrapper\";\r\n\r\nconst StyledErrorMessage = (props : { name: string}) => (<ErrorMessage name={props.name}>\r\n  {msg => <div className={styles.error}>{msg}</div>}\r\n</ErrorMessage>)\r\n\r\nexport default function LoginFormik(): JSX.Element {\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const reduxState = useAppSelector((redState) => redState.loginReducer);\r\n\r\n  return (\r\n    <LoginWrapper email={reduxState.email}>\r\n      <Formik\r\n        initialValues={InitialLoginState}\r\n        validationSchema={loginSchema}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          setTimeout(() => {\r\n            dispatch(\r\n              update({ email: values.email, password: values.password })\r\n            );\r\n            navigate(\"success\");\r\n            setSubmitting(false);\r\n          });\r\n        }}\r\n      >\r\n        <Form>\r\n          <StackLayout orientation=\"vertical\">\r\n            <div className={styles[\"default-margin\"]}>\r\n              <label\r\n                className={`${styles[\"margin-right\"]} ${styles.required}`}\r\n                htmlFor=\"email\"\r\n              >\r\n                Email:{\" \"}\r\n              </label>\r\n              <StackLayout orientation=\"vertical\">\r\n                <Field className={styles[\"input-field\"]} name=\"email\" />\r\n                <StyledErrorMessage name=\"email\" />\r\n              </StackLayout>\r\n            </div>\r\n\r\n            <div className={styles[\"default-margin\"]}>\r\n              <label\r\n                className={`${styles[\"margin-right\"]} ${styles.required}`}\r\n                htmlFor=\"password\"\r\n              >\r\n                Password:{\" \"}\r\n              </label>\r\n              <StackLayout orientation=\"vertical\">\r\n                <Field\r\n                  className={styles[\"input-field\"]}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                />\r\n                <StyledErrorMessage name=\"password\" />\r\n              </StackLayout>\r\n            </div>\r\n\r\n            <button className={styles.submit} type=\"submit\">\r\n              Submit\r\n            </button>\r\n          </StackLayout>\r\n        </Form>\r\n      </Formik>\r\n    </LoginWrapper>\r\n  );\r\n}\r\n","import { StackLayout } from \"@progress/kendo-react-layout\";\r\nimport { LoginProps } from \"@common/types\";\r\nimport styles from \"./styles/login.module.css\";\r\n\r\nexport default function Login(props: LoginProps): JSX.Element {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <StackLayout\r\n        orientation=\"vertical\"\r\n        align={{ horizontal: \"center\", vertical: \"middle\" }}\r\n      >\r\n        <label htmlFor=\"email\" className={styles.required}>\r\n          Email{props.renderContent && ` (${props.email})`}\r\n        </label>\r\n        <input\r\n          required\r\n          id=\"email\"\r\n          className={styles[\"default-margin\"]}\r\n          minLength={6}\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={props.email}\r\n          placeholder=\"email\"\r\n          onInput={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            props.onInput(\"email\", e.target.value)\r\n          }\r\n        />\r\n        <label htmlFor=\"password\" className={styles.required}>\r\n          password{props.renderContent && ` (${props.password})`}\r\n        </label>\r\n        <input\r\n          required\r\n          id=\"password\"\r\n          className={styles['default-margin']}\r\n          minLength={6}\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={props.password}\r\n          placeholder=\"password\"\r\n          onInput={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            props.onInput(\"password\", e.target.value)\r\n          }\r\n        />\r\n        <input type=\"submit\" value=\"Login\" />\r\n      </StackLayout>\r\n    </form>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input-field\":\"login_input-field__tKBTk\",\"default-margin\":\"login_default-margin__L4dqo\",\"margin-right\":\"login_margin-right__b4pyf\",\"required\":\"login_required__PrTP4\",\"error\":\"login_error__fWkAx\",\"submit\":\"login_submit__Ffr-0\"};"],"names":["InitialLoginState","email","password","LoginReduxContainer","dispatch","useAppDispatch","navigate","useNavigate","state","setState","useState","reduxState","useAppSelector","redState","loginReducer","_jsx","LoginWrapper","children","Login","renderContent","onInput","target","value","prevState","onSubmit","e","data","FormData","console","log","JSON","stringify","Object","fromEntries","entries","update","preventDefault","WelcomeMessage","props","Label","style","margin","concat","_jsxs","StackLayout","orientation","loginSchema","Yup","shape","min","required","StyledErrorMessage","ErrorMessage","name","msg","className","styles","error","LoginFormik","Formik","initialValues","validationSchema","values","_ref","setSubmitting","setTimeout","Form","htmlFor","Field","type","submit","align","horizontal","vertical","id","minLength","placeholder"],"sourceRoot":""}